---
export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="pt-BR">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Personal Virtual via WhatsApp - Transforme seu corpo com acompanhamento personalizado diário" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		
		<!-- Google Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
		
		<!-- Meta Tags para SEO -->
		<meta property="og:title" content="Personal Virtual - Seu Treino Personalizado via WhatsApp">
		<meta property="og:description" content="Transforme seu corpo com acompanhamento personalizado diário via WhatsApp. Treinos científicos e suporte constante.">
		<meta property="og:type" content="website">
		<meta name="twitter:card" content="summary_large_image">
		
		<!-- Structured Data -->
		<script type="application/ld+json">
		{
			"@context": "https://schema.org",
			"@type": "Service",
			"name": "Personal Virtual via WhatsApp",
			"description": "Serviço de personal trainer virtual com acompanhamento diário via WhatsApp",
			"provider": {
				"@type": "Person",
				"name": "Juliana Personal"
			}
		}
		</script>
	</head>
	<body>
		<slot />
		
		<!-- Scripts para interatividade -->
		<script>
			// Smooth scroll para links internos
			document.querySelectorAll('a[href^="#"]').forEach(anchor => {
				anchor.addEventListener('click', function (e) {
					e.preventDefault();
					const target = document.querySelector(this.getAttribute('href'));
					if (target) {
						target.scrollIntoView({
							behavior: 'smooth',
							block: 'start'
						});
					}
				});
			});

			// Animação de entrada dos elementos
			const observerOptions = {
				threshold: 0.1,
				rootMargin: '0px 0px -50px 0px'
			};

			const observer = new IntersectionObserver((entries) => {
				entries.forEach(entry => {
					if (entry.isIntersecting) {
						entry.target.style.opacity = '1';
						entry.target.style.transform = 'translateY(0)';
					}
				});
			}, observerOptions);

			// Aplicar animação aos cards
			document.querySelectorAll('.feature-card, .service-card, .plan-card').forEach(card => {
				card.style.opacity = '0';
				card.style.transform = 'translateY(30px)';
				card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
				observer.observe(card);
			});

			// Efeito de digitação no WhatsApp
			setTimeout(() => {
				const messages = document.querySelectorAll('.message');
				messages.forEach((message, index) => {
					setTimeout(() => {
						message.style.opacity = '1';
						message.style.transform = 'translateY(0)';
					}, index * 1000);
				});
			}, 2000);

			// Animação dos números
			function animateNumbers() {
				const numbers = document.querySelectorAll('.proof-number');
				
				const numberObserver = new IntersectionObserver((entries) => {
					entries.forEach(entry => {
						if (entry.isIntersecting) {
							const element = entry.target;
							const target = parseInt(element.getAttribute('data-target'));
							const suffix = element.textContent.includes('kg') ? 'kg' : '+';
							let current = 0;
							const increment = target / 50;
							const timer = setInterval(() => {
								current += increment;
								if (current >= target) {
									current = target;
									clearInterval(timer);
								}
								element.textContent = Math.floor(current) + suffix;
							}, 40);
							numberObserver.unobserve(element);
						}
					});
				}, { threshold: 0.5 });

				numbers.forEach(number => {
					numberObserver.observe(number);
				});
			}

			// Iniciar animação dos números quando a página carregar
			setTimeout(animateNumbers, 1000);

			// Carrossel de depoimentos
			let currentSlide = 0;
			const slides = document.querySelectorAll('.testimonial-slide');
			const indicators = document.querySelectorAll('.indicator');
			const track = document.getElementById('testimonialTrack');
			const prevBtn = document.getElementById('prevBtn');
			const nextBtn = document.getElementById('nextBtn');
			const totalSlides = slides.length;

			function updateCarousel() {
				// Atualizar posição do track
				if (track) {
					track.style.transform = `translateX(-${currentSlide * 25}%)`;
				}

				// Atualizar slides ativos
				slides.forEach((slide, index) => {
					slide.classList.toggle('active', index === currentSlide);
				});

				// Atualizar indicadores
				indicators.forEach((indicator, index) => {
					indicator.classList.toggle('active', index === currentSlide);
				});
			}

			function nextSlide() {
				currentSlide = (currentSlide + 1) % totalSlides;
				updateCarousel();
			}

			function prevSlide() {
				currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
				updateCarousel();
			}

			// Event listeners para navegação
			if (nextBtn) {
				nextBtn.addEventListener('click', nextSlide);
			}

			if (prevBtn) {
				prevBtn.addEventListener('click', prevSlide);
			}

			// Event listeners para indicadores
			indicators.forEach((indicator, index) => {
				indicator.addEventListener('click', () => {
					currentSlide = index;
					updateCarousel();
				});
			});

			// Auto-play do carrossel
			setInterval(nextSlide, 5000);

			// Inicializar carrossel
			updateCarousel();

			// Modal de depoimentos
			const modal = document.getElementById('testimonialModal');
			const closeModal = document.getElementById('closeModal');
			const modalImage = document.getElementById('modalImage');
			const modalName = document.getElementById('modalName');
			const modalResult = document.getElementById('modalResult');
			const modalTestimonial = document.getElementById('modalTestimonial');

			// Função para abrir modal
			function openModal(testimonialData) {
				if (modal && modalImage && modalName && modalResult && modalTestimonial) {
					modalName.textContent = testimonialData.name;
					modalResult.textContent = testimonialData.result;
					modalTestimonial.textContent = testimonialData.text;
					
					if (testimonialData.image) {
						modalImage.src = testimonialData.image;
						modalImage.alt = testimonialData.name;
						modalImage.style.display = 'block';
					} else {
						modalImage.style.display = 'none';
					}
					
					modal.style.display = 'flex';
					document.body.style.overflow = 'hidden';
				}
			}

			// Função para fechar modal
			function closeModalFunc() {
				if (modal) {
					modal.style.display = 'none';
					document.body.style.overflow = 'auto';
				}
			}

			// Event listeners para abrir modal
			document.querySelectorAll('.testimonial-card').forEach(card => {
				card.addEventListener('click', () => {
					const testimonialData = JSON.parse(card.getAttribute('data-testimonial'));
					openModal(testimonialData);
				});
			});

			// Event listeners para fechar modal
			if (closeModal) {
				closeModal.addEventListener('click', closeModalFunc);
			}

			if (modal) {
				modal.addEventListener('click', (e) => {
					if (e.target === modal) {
						closeModalFunc();
					}
				});
			}

			// Fechar modal com ESC
			document.addEventListener('keydown', (e) => {
				if (e.key === 'Escape') {
					closeModalFunc();
				}
			});
		</script>
	</body>
</html>

<style is:global>
	html {
		scroll-behavior: smooth;
	}
	
	body {
		margin: 0;
		font-family: 'Inter', system-ui, sans-serif;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}

	/* Animações iniciais para mensagens do WhatsApp */
	.message {
		opacity: 0;
		transform: translateY(20px);
		transition: all 0.5s ease;
	}

	/* Efeitos de hover melhorados */
	.cta-button {
		position: relative;
		overflow: hidden;
	}

	.cta-button::before {
		content: '';
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
		transition: left 0.5s;
	}

	.cta-button:hover::before {
		left: 100%;
	}

	/* Scroll suave personalizado */
	::-webkit-scrollbar {
		width: 8px;
	}

	::-webkit-scrollbar-track {
		background: #f1f1f1;
	}

	::-webkit-scrollbar-thumb {
		background: #6366f1;
		border-radius: 4px;
	}

	::-webkit-scrollbar-thumb:hover {
		background: #4f46e5;
	}

	/* Modal Styles */
	.modal-overlay {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: rgba(0, 0, 0, 0.8);
		backdrop-filter: blur(10px);
		z-index: 9999;
		align-items: center;
		justify-content: center;
		padding: 20px;
		animation: fadeIn 0.3s ease;
	}

	@keyframes fadeIn {
		from { opacity: 0; }
		to { opacity: 1; }
	}

	.modal-content {
		background: white;
		border-radius: 24px;
		max-width: 800px;
		width: 100%;
		height: 500px;
		overflow: hidden;
		position: relative;
		box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
		animation: slideUp 0.3s ease;
	}

	@keyframes slideUp {
		from { 
			opacity: 0;
			transform: translateY(30px) scale(0.95);
		}
		to { 
			opacity: 1;
			transform: translateY(0) scale(1);
		}
	}

	.modal-close {
		position: absolute;
		top: 20px;
		right: 20px;
		background: rgba(0, 0, 0, 0.1);
		border: none;
		width: 40px;
		height: 40px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		font-size: 24px;
		color: #666;
		transition: all 0.3s ease;
		z-index: 10;
	}

	.modal-close:hover {
		background: rgba(0, 0, 0, 0.2);
		color: #333;
		transform: scale(1.1);
	}

	.modal-body {
		display: grid;
		grid-template-columns: 300px 1fr;
		gap: 3rem;
		padding: 3rem;
		align-items: start;
	}

	.modal-image {
		display: flex;
		justify-content: center;
		overflow: hidden;
	}

	.modal-photo {
		width: 100%;
		height: 100%;
		object-fit: cover;
		object-position: center;
	}

	.modal-text {
		display: flex;
		flex-direction: column;
		gap: 1.5rem;
	}

	.modal-text h3 {
		font-size: 2rem;
		font-weight: 700;
		color: #1a1a1a;
		margin: 0;
	}

	.modal-text p {
		font-size: 1.125rem;
		color: #22c55e;
		font-weight: 600;
		margin: 0;
	}

	.modal-text blockquote {
		font-size: 1.25rem;
		line-height: 1.6;
		color: #4a4a4a;
		font-style: italic;
		margin: 0;
		padding: 1.5rem;
		background: #f8f9fa;
		border-radius: 16px;
		border-left: 4px solid #8B4513;
		position: relative;
	}

	.modal-text blockquote::before {
		content: '"';
		position: absolute;
		top: -10px;
		left: 15px;
		font-size: 3rem;
		color: #8B4513;
		font-family: serif;
		opacity: 0.3;
	}

	/* Responsive modal */
	@media (max-width: 768px) {
		.modal-body {
			grid-template-columns: 1fr;
			gap: 2rem;
			padding: 2rem;
			text-align: center;
		}

		.modal-photo {
			width: 200px;
			height: 200px;
		}

		.modal-text blockquote {
			font-size: 1.125rem;
			padding: 1.25rem;
		}

		.modal-text h3 {
			font-size: 1.75rem;
		}
	}
</style>